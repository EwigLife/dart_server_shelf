// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-dart"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  role     Role      @default(USER) // need to create table
  password String?
  fcmtoken String?
  salt     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts    Post[]
  Profile  Profile[] @relation("userProfile")
}

model Profile {
  id           Int     @id @default(autoincrement())
  firstName    String?
  lastName     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  postCode     String?
  phone        String?
  slug         String? @unique
  images       String?
  longitude    String?
  latitude     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  published    Boolean @default(false)
  user         Users?  @relation("userProfile", fields: [userId], references: [id])
  userId       Int?   
}

model Post {
  id               Int        @id @default(autoincrement())
  title            String
  slug             String?    @unique
  description      String?
  featuredImages   String?
  galleryImages    String?
  video            String
  longDescription  String?
  longitude        String?
  latitude         String?
  content          String?
  plotNumber       String?
  price            Float?
  city             String?
  area             String?
  isInstallmentAvailable  Boolean? @default(false)
  advanceAmount    Float
  noOfInstallments Int
  monthlyInstallments Int
  readyForPossession  Boolean? @default(false)
  areaSizeUnit     AreaSizeUnit @default(MARLA)
  bedroooms        Int
  bathroom         Int
  contactEmail     String
  contactMobile    String
  contactLandline  String
  featureAndAmenities String // save ameeties or featurs in json
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  published        Boolean    @default(false)
  author           Users      @relation(fields: [authorId], references: [id])
  authorId         Int
  postmeta         PostMeta[]
  category         Category @relation(fields: [categoryId], references: [id])
  categoryId       Int
  // propertyTypeList PropertyTypeList        @relation(fields: [propertyTypeListId], references: [id])
  // propertyTypeListId Int
  
}

model PostMeta {
  id               Int     @id @default(autoincrement())
  metaTitle        String
  metaDescription  String?
  published        Boolean @default(false)
  post             Post    @relation(fields: [postId], references: [id])
  postId           Int
}

model Amenities {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String?     @unique
  description String?
  parentId    Int?
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  amenities   Amenities[]
  posts       Post[]
}


enum Role {
  USER
  ADMIN
}

enum SellPurpose {
  SELL
  RENT
}



enum AreaSizeUnit {
  MARLA
  SQFT
  SQM
  SQYD
  KANAL
}
